import scala.language._
import scala.reflect.{ClassTag, classTag}
import scala.reflect.runtime.universe._
import scala.reflect.runtime._
import definitions._
import Flag._
import scala.reflect.runtime.{universe => ru}
//import scala.reflect.{basis => rb}
val cm = scala.reflect.runtime.universe.runtimeMirror(getClass.getClassLoader)
val rm = scala.reflect.runtime.universe.rootMirror
//def show(cl: ClassLoader): String = cm.reflectModule(cm.staticModule("scala.reflect.runtime.ReflectionUtils")).instance.asInstanceOf[{def show(cl: ClassLoader): String}].show(cl)
import scala.tools.reflect.ToolBox
val tb = cm.mkToolBox()
import scala.tools.reflect.Eval
//import scala.reflect.makro.Context
import scala.reflect.macros.Context
def mirrorThatLoaded(sym: Symbol) = {
  val u = scala.reflect.runtime.universe.asInstanceOf[scala.reflect.internal.SymbolTable]
  val m = u.mirrorThatLoaded(sym.asInstanceOf[u.Symbol])
  m.asInstanceOf[scala.reflect.runtime.universe.Mirror]
}
//def uniques = ru.asInstanceOf[scala.reflect.internal.Types].uniques.asInstanceOf[scala.reflect.internal.util.HashSet[_]]
implicit class SymbolFlags(sym: Symbol) { def flags = ru.show(sym.asInstanceOf[scala.reflect.internal.Symbols#Symbol].flags.asInstanceOf[FlagSet]) }
implicit class TypeFlags(tpe: Type) { def flags = tpe.typeSymbol.flags }