import scala.reflect.{ClassTag, classTag}
import scala.reflect.runtime.universe._
import scala.reflect.runtime._
import definitions._
import Flag._
import scala.reflect.runtime.{universe => ru}
import scala.reflect.{basis => rb}
val cm = scala.reflect.runtime.universe.runtimeMirror(getClass.getClassLoader)
val rm = scala.reflect.runtime.universe.rootMirror
def show(cl: ClassLoader): String = scala.reflect.runtime.ReflectionUtils.show(cl)
import scala.tools.reflect.ToolBox
import scala.tools.reflect.Eval
class A
class B { def foo(x: A) = 42 }
val im = cm.reflect(new B)
val method = im.symbol.asType.nonPrivateMember(newTermName("foo")).asMethodSymbol
val mm = im.reflectMethod(method)