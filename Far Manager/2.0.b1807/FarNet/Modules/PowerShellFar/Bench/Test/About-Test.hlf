.Language=English,English (English)
.PluginContents=Bench
.Options TabSize=4

@Contents
$#PowerShellFar Tests#

PREREQUISITES

*) Test scripts usually call PowerShellFar scripts from Bench directory. That
is why directory Bench has to be included into the system path before tests.

*) Test scripts can call each other and database scripts need some data to work
with. That is why before some tests you have to run Initialize-Test-.ps1. It
adds the directory to the path and asks whether you want to create temporary
data tables for data test scripts Test-Panel-Db*-.ps1 (if you have supported
database providers installed).

SEE ALSO

	~DATABASE TESTS~@DataTest@
	~Test-Dialog.ps1~@TestDialog@

@DataTest
$#DATABASE TESTS#
~Contents~@Contents@

You can run script Test-Panel-DbText-.ps1 without any preparations. See the
script comments for details.

*) Other scripts are designed for and tested with SQL Server Express (instance
'.\sqlexpress', e.g. installed with Visual Studio 2005), SQL Server Compact
(installed with Visual Studio 2008, 2010), and SQLite
(http://sourceforge.net/projects/sqlite-dotnet2).

*) If your SQL Server is different, change the connection string in
Initialize-Test-.ps1, line $DbConnection.ConnectionString = ..

*) Run Initialize-Test-.ps1 - it creates a mini-database with two tables.

	For SQL Server Express it creates two related tables in Tempdb: TestNotes
	(used by Test-Panel-DbNotes-.ps1) and TestCategories. After tests you can
	drop the tables manually or you can just forget about them, they will be
	removed automatically when SQL server restarts.

	For SQL Server Compact it created a database file Tempdb.sdf in %TEMP%
	directory and adds same two tables and same data. After tests you should
	remove this file yourself.

Now you are ready to play with scripts. Recommended sequence:

1) Run Panel-DbTable-.ps1 (from Bench, it is a tool not a demo), if everything
is fine you get all tables in your Tempdb including TestNotes and
TestCategories. Open them by [Enter] and see how they look in basic mode (i.e.
without any customisation). Note that you can even perform all operations like
insert, delete and update ([F7], [Del], etc.)

2) Run Test-Panel-DbCategories-.ps1 - the table looks now slightly different,
not much, but the field CategoryId is hidden because a user normally should not
use or even see it, this is internal DB information.

3) Run Test-Panel-DbNotes-.ps1 - it looks even more different (two fields are
hidden). The important point is that how you modify Category field. When you
[Enter] on it Test-Panel-DbCategories-.ps1 is actually called and the table
TestCategories is opened for selection of another category; at the same time
you can modify or add new categories just like as if you opened it directly in
step 2).

#KNOWN ISSUES#

*) If you are about to delete or modify again just added and saved record then
at first you have to re-read the table data explicitly by <CtrlR> (otherwise you
can get concurrency error or record data can be incomplete and etc.).

*) Don't [Enter] into tables with too many records, loading data in basic mode
(i.e. SELECT *) can take very long time. In real production databases normally
one have to use manually and carefully designed SELECT for taking only really
needed records and fields.


@TestBase
$#Test-Base-.ps1#
~Contents~@Contents@

This is just a demo help topic.


@TestDialog
$#Test-Dialog-.ps1#
~Contents~@Contents@

This scripts demonstrates most of features and functionality available in
Far.NET dialogs. It

	- creates a dialog and sets a help topic from a file in the same folder;
	- adds most of available Far.NET dialog items and their different forms;
	- sets items properties before Show() and after Show() (see [Code]);
	- adds a number of various dialog and item event handlers;
	- sets focused and default item and starts Show().
	- shows how to emulate IDialog.MouseClicked event.
	- shows how to use and draw IUserControl.

#[Done]#

When the dialog is closed by [Done] (default button) the script outputs some
occurred events information and current data of the dialog and items.

#[Fail]#

This is just a test of what happens on an error in an event handler.

#[Test]#

Automated test. It invokes steps from the super-macro "Test-Dialog+.ps1" in
ask-mode so that you can watch each step code or keys and see how each step
works. At any time you may choose [Cancel] to stop stepping or [Continue] to
play the rest of steps automatically.

#[List]#

Extra test of three list controls (comboedit, combobox, listbox). The code shows
how to use DetachItems(), AttachItems() for better performance when changes are
large enough.

#[More]#

Button [More] starts the same dialog to show it is OK to open nested dialogs.

#[Exit]#

'Cancel' button (property IDialog.Cancel): if it is pushed Show() returns false.

#F11 \ PowerShellFar \ Invoke input code#

Starting from Far 1.71.2309 you can invoke PowerShell commands from Far dialogs,
too. Thus, you can test a dialog and its items manually running PowerShell code
just in place. All variables defined is the script are available for the code.
For example you can enter and run:

	$dialog ## gets this dialog properties;
	$e1 ## gets the first edit control properties;
	$e1.Text = 'New text' ## sets some new text in it;
	$e1.Disabled = 1 ## disabled it
	$lb.Items.RemoveAt(0) ## remove the first listbox item
