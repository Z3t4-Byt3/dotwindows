<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FarNet.Settings</name>
    </assembly>
    <members>
        <member name="T:FarNet.Settings.ModuleSettings">
             <summary>
             Module settings base class.
             </summary>
             <remarks>
             How to make a module settings class and setting properties
             <ul>
             <li>Derive the settings class from <see cref="T:FarNet.Settings.ModuleSettings"/>.</li>
             <li>Set <see cref="T:FarNet.Settings.ModuleSettingsProvider"/> attribute for the class.</li>
             <li>Use <c>UserScopedSetting</c> attribute to define setting properties.</li>
             <li>Use <c>DefaultSettingValue</c> attribute to define default values.</li>
             <li>Use <c>SettingsManageability</c> attribute for roaming settings.</li>
             <li>Use <c>Browsable(false)</c> attribute to exclude settings from UI.</li>
             <li>
             Use <c>SettingsSerializeAs(String|Xml|Binary)</c> attribute to specify serialization.
             Normally value and primitive types are serialized as strings, complex types are serialized as XML.
             </li>
             </ul>
             <para>
             A module may have any number of settings classes. Classes designed for users should be public.
             For each public settings class the core shows its item in the module settings menu.
             Selection of this item opens the module settings panel.
             </para>
             <para>
             Settings class names are used as settings file names in the local and roaming module directories.
             Thus, choose names carefully and avoid future renamings (it is fine to rename namespaces, though).
             </para>
             <para>
             It is fine to add new setting properties, they will appear with their default values.
             It is fine to remove or rename properties, the old data will be removed from settings on saving.
             </para>
             <para>
             Use primitive types convertible to and from strings or serializable types.
             Settings for user changes in UI should be convertible to and from strings.
             Do not change types or type members significantly, this may not work well.
             Use custom types in settings carefully, avoid renamings and brute changes,
             or use custom serialization designed to be tolerant to such changes.
             </para>
             <para>
             Override the <c>Save</c> method in order to perform data validation.
             Throw informative exceptions on errors. Call the base method on success.
             </para>
             <para>
             If the settings class should have a single instance then use the public static property <c>Default</c>, see the example.
             The core looks for this property and uses its instance. If it is not found then a new instance is created (mind default constructor).
             </para>
             <para>
             See <see cref="T:FarNet.Settings.ModuleSettingsProvider"/> for important details of storing settings.
             </para>
             <example>
             <code>
            [SettingsProvider(typeof(ModuleSettingsProvider))]
            public class Settings : ModuleSettings
            {
            	static readonly Settings _Default = new Settings();
            	public static Settings Default { get { return _Default; } }
            	[UserScopedSetting]
            	[DefaultSettingValue("2000-11-22")]
            	public DateTime DateTimeValue
            	{
            		get { return (DateTime)this["DateTimeValue"]; }
            		set { this["DateTimeValue"] = value; }
            	}
            	[UserScopedSetting]
            	[DefaultSettingValue("42")]
            	[SettingsManageability(SettingsManageability.Roaming)]
            	public int IntValue
            	{
            		get { return (int)this["IntValue"]; }
            		set { this["IntValue"] = value; }
            	}
            }
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:FarNet.Settings.ModuleSettings.#ctor">
            
        </member>
        <member name="P:FarNet.Settings.ModuleSettings.Manager">
            <summary>
            Gets the module manager.
            </summary>
        </member>
        <member name="P:FarNet.Settings.ModuleSettings.Context">
            <summary>
            Seals the context.
            </summary>
        </member>
        <member name="T:FarNet.Settings.ModuleSettingsProvider">
            <summary>
            Settings provider using .resources files.
            </summary>
            <remarks>
            The type of this class is used as the argument of <c>SettingsProviderAttribute</c> of settings classes.
            <para>
            Settings having <c>UsingDefaultValue</c> equal to true are not stored in files.
            Thus, such settings are restored with their current default values.
            </para>
            <para>
            Settings having <c>SerializedValue</c> equal to null are not stored.
            Thus, such settings are restored with their current default values.
            If defaults are not null then there is a subtle issue of settings values set to null.
            Basically it is better to avoid not null defaults for reference types other than strings.
            It is fine to have not null defaults for strings but consider to save empty strings, not nulls.
            Compare: stored empty strings are restored exactly, not stored nulls are restored as current defaults.
            </para>
            <para>
            Recommended data types for trivial settings are <c>String</c> and <c>DateTime</c> and primitive types:
            <c>Boolean</c>, <c>Byte/SByte</c>, <c>Int16/UInt16</c>, <c>Int32/UInt32</c>, <c>Int64/UInt64</c>, <c>Char</c>, <c>Double</c>, and <c>Single</c>.
            </para>
            <para>
            Other trivial standard value types (for example <c>Guid</c>, <c>Decimal</c>, etc.) can be used as well, with or without defaults,
            but the settings engine never treats them as using default values, <c>UsingDefaultValue</c> is always false.
            </para>
            <para>
            Implementation.
            This provider reads and writes .resources files using <c>ResourceReader</c> and <c>ResourceWriter</c>.
            Settings classes should have added to their contexts two key/value pairs where keys are
            <see cref="F:FarNet.Settings.ModuleSettingsProvider.RoamingFileName"/> and <see cref="F:FarNet.Settings.ModuleSettingsProvider.LocalFileName"/>
            and values are full roaming and local paths of settings files.
            </para>
            </remarks>
        </member>
        <member name="F:FarNet.Settings.ModuleSettingsProvider.RoamingFileName">
            
        </member>
        <member name="F:FarNet.Settings.ModuleSettingsProvider.LocalFileName">
            
        </member>
        <member name="M:FarNet.Settings.ModuleSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            
        </member>
        <member name="M:FarNet.Settings.ModuleSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            
        </member>
        <member name="M:FarNet.Settings.ModuleSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            
        </member>
        <member name="P:FarNet.Settings.ModuleSettingsProvider.ApplicationName">
            
        </member>
        <member name="P:FarNet.Settings.ModuleSettingsProvider.Name">
            
        </member>
    </members>
</doc>
